{"ast":null,"code":"var _jsxFileName = \"/home/basil/farmsafety_app/src/components/quiz/quiz.js\";\nimport React, { Component } from \"react\";\nimport QuestionBox from \"./questionBox\";\nimport \"./quiz.css\";\nimport useState from \"react\";\nimport fire from \"../../config/fire\";\nimport { Button, ButtonGroup, Toast } from \"react-bootstrap\";\nimport Questions, { Quizdata } from \"./questions\";\nimport { Label } from \"semantic-ui-react\";\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadQuiz = () => {\n      const currentQuest = this.state.currentQuest;\n      this.setState(() => {\n        return {\n          questions: Quizdata[currentQuest].question,\n          options: Quizdata[currentQuest].options,\n          answer: Quizdata[currentQuest].answer,\n          pictures: Quizdata[currentQuest].picture\n        };\n      });\n      console.log(this.state.questions);\n    };\n\n    this.nextQuestion = () => {\n      // e.preventDefault();\n      const _this$state = this.state,\n            userAns = _this$state.userAns,\n            score = _this$state.score;\n      this.setState({\n        currentQuestion: this.state.currentQuestion + 1\n      });\n      console.log(this.state.currentQuest);\n    };\n\n    this.checkAns = answer => {\n      const _this$state2 = this.state,\n            userAns = _this$state2.userAns,\n            score = _this$state2.score;\n\n      if (userAns === answer) {\n        this.setState({\n          score: score + 1\n        });\n      }\n\n      this.setState({\n        userAns: answer,\n        disabled: false\n      });\n    };\n\n    this.state = {\n      userAns: null,\n      options: [],\n      //  questions: \"\",\n      disabled: true,\n      currentQuest: 0,\n      scores: 0\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const currentQuest = this.state.currentQuest;\n\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState({\n        disabled: true,\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      }); //     console.log(this.state.questions);\n    }\n  }\n\n  /*\n  ANSWER = option => {\n    const [answer, setAnswer] = useState(option);\n     {\n      answer.map((text, index) => (\n        <Button\n          key={index}\n          onClick={() => {\n            setAnswer([text]);\n          }}\n        >\n          {text}\n        </Button>\n      ));\n    }\n  };\n  */\n  render() {\n    const _this$state3 = this.state,\n          userAns = _this$state3.userAns,\n          options = _this$state3.options,\n          currentQuest = _this$state3.currentQuest;\n    return React.createElement(\"div\", {\n      className: \"lol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), this.state.questions, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), options.map(option => React.createElement(Button, {\n      key: option.id,\n      className: \"ui floating message options\\n            \".concat(userAns === option ? \"selected\" : null, \"\\n           \"),\n      onClick: () => this.checkAns(option) // key={id}\n      //  question={questions}\n      // option={options}\n      // answer={answers}\n      // selected={answer => this.checkAns(answer, option)}\n      //  onClick={this.ANSWER}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, option)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.checkAns,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"CHECK\"), React.createElement(Button, {\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"NEXT\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), currentQuest === Quizdata.length - 1 ? alert(\"Quiz FINISHED\") : null, this.state.scores);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/basil/farmsafety_app/src/components/quiz/quiz.js"],"names":["React","Component","QuestionBox","useState","fire","Button","ButtonGroup","Toast","Questions","Quizdata","Label","Quiz","constructor","props","loadQuiz","currentQuest","state","setState","questions","question","options","answer","pictures","picture","console","log","nextQuestion","userAns","score","currentQuestion","checkAns","disabled","scores","componentDidMount","componentDidUpdate","prevProps","prevState","render","map","option","id","length","alert"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport QuestionBox from \"./questionBox\";\nimport \"./quiz.css\";\nimport useState from \"react\";\nimport fire from \"../../config/fire\";\nimport { Button, ButtonGroup, Toast } from \"react-bootstrap\";\n\nimport Questions, { Quizdata } from \"./questions\";\nimport { Label } from \"semantic-ui-react\";\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAns: null,\n      options: [],\n      //  questions: \"\",\n      disabled: true,\n      currentQuest: 0,\n      scores: 0\n    };\n  }\n  loadQuiz = () => {\n    const { currentQuest } = this.state;\n    this.setState(() => {\n      return {\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      };\n    });\n    console.log(this.state.questions);\n  };\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentQuest } = this.state;\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState({\n        disabled: true,\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      });\n      //     console.log(this.state.questions);\n    }\n  }\n\n  nextQuestion = () => {\n    // e.preventDefault();\n    const { userAns, score } = this.state;\n\n    this.setState({\n      currentQuestion: this.state.currentQuestion + 1\n    });\n    console.log(this.state.currentQuest);\n  };\n\n  checkAns = answer => {\n    const { userAns, score } = this.state;\n\n    if (userAns === answer) {\n      this.setState({\n        score: score + 1\n      });\n    }\n    this.setState({\n      userAns: answer,\n      disabled: false\n    });\n  };\n\n  /*\n  ANSWER = option => {\n    const [answer, setAnswer] = useState(option);\n\n    {\n      answer.map((text, index) => (\n        <Button\n          key={index}\n          onClick={() => {\n            setAnswer([text]);\n          }}\n        >\n          {text}\n        </Button>\n      ));\n    }\n  };\n*/\n  render() {\n    const { userAns, options, currentQuest } = this.state;\n    return (\n      <div className=\"lol\">\n        <br></br>\n        {this.state.questions}\n        <br></br>\n        {/* {this.state.options.map(\n          item => (\n            <button\n              id=\"optionsData\"\n              className=\"ui floating message options\"\n              className={userAns === this.state.options ? \"selected\" : null}\n              onClick={() => this.checkAnswer(option)}\n            >\n              {item}\n            </button>\n          ) maps the options on the page\n        )}\n          */}\n\n        {options.map(option => (\n          <Button\n            key={option.id}\n            className={`ui floating message options\n            ${userAns === option ? \"selected\" : null}\n           `}\n            onClick={() => this.checkAns(option)}\n            // key={id}\n            //  question={questions}\n            // option={options}\n            // answer={answers}\n            // selected={answer => this.checkAns(answer, option)}\n            //  onClick={this.ANSWER}\n          >\n            {option}\n          </Button>\n        ))}\n\n        <br></br>\n        <Button onClick={this.checkAns}>CHECK</Button>\n        <Button onClick={this.nextQuestion}>NEXT</Button>\n        <br></br>\n\n        {currentQuest === Quizdata.length - 1 ? alert(\"Quiz FINISHED\") : null}\n        {this.state.scores}\n      </div>\n    );\n  }\n}\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}