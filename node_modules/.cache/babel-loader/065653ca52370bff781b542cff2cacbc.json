{"ast":null,"code":"var _jsxFileName = \"/home/basil/farmsafety_app/src/components/quiz/quiz.js\";\nimport React, { Component } from \"react\";\nimport QuestionBox from \"./questionBox\";\nimport \"./quiz.css\"; //import useState from \"react\";\n\nimport fire from \"../../config/fire\";\nimport { Button, ButtonGroup, Toast, ProgressBar } from \"react-bootstrap\";\nimport Questions, { Quizdata } from \"./questions\"; //import { Label } from \"semantic-ui-react\";\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAns: null,\n      options: [],\n      disabled: true,\n      currentQuest: 0,\n      scores: 0\n    };\n\n    this.loadQuiz = () => {\n      const currentQuest = this.state.currentQuest; //  console.log(Quizdata[2].question);\n\n      this.setState(() => {\n        return {\n          questions: Quizdata[currentQuest].question,\n          options: Quizdata[currentQuest].options,\n          answer: Quizdata[currentQuest].answer,\n          pictures: Quizdata[currentQuest].picture\n        };\n      });\n      console.log(this.state.answer);\n    };\n\n    this.nextQuestion = e => {\n      // e.preventDefault();\n      //  const { userAns, score } = this.state;\n      if (this.state.userAns === null) {\n        alert(\"choose an option\");\n        return;\n      }\n\n      this.setState({\n        currentQuest: this.state.currentQuest + 1\n      }); // console.log(this.state.currentQuest);\n    };\n\n    this.checkAns = userAns => {\n      const _this$state = this.state,\n            answer = _this$state.answer,\n            scores = _this$state.scores;\n      this.setState({\n        userAns: answer,\n        disabled: false\n      });\n      console.log(userAns);\n\n      if (userAns === answer) {\n        console.log(\"correct\");\n        this.setState({\n          scores: scores + 1\n        });\n      } else {\n        console.log(\"Wrong\");\n        alert(\"Correct answer is \" + answer);\n      } //console.log(scores);\n\n    };\n\n    this.pushtoDB = () => {\n      var ref = fire.database().ref(\"data\");\n      var newRef = ref.push();\n      newRef.set({\n        Question: this.state.questions,\n        //Send data to DB to track for analysis\n        UserAnswer: this.state.userAns // CorrectAnswer: this.state.answer\n\n      });\n      console.log(\"Sent to Database\");\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const currentQuest = this.state.currentQuest;\n\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState({\n        disabled: true,\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      }); //console.log(this.state.questions);\n    }\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          userAns = _this$state2.userAns,\n          options = _this$state2.options,\n          currentQuest = _this$state2.currentQuest;\n    return React.createElement(\"div\", {\n      className: \"lol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(ProgressBar, {\n      animated: true,\n      now: this.state.currentQuest * 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), this.state.questions, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), options.map(option => React.createElement(Button, {\n      key: option.id,\n      className: \"ui floating message options\\n            \".concat(userAns === option ? \"selected\" : null, \"\\n           \"),\n      onClick: () => this.checkAns(option),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, option)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: () => this.checkAns(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"CHECK\"), React.createElement(Button, {\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"NEXT\"), React.createElement(Button, {\n      onClick: this.pushtoDB,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"sent to DB\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), currentQuest === Quizdata.length - 1 ? alert(\"Quiz FINISHED\") : null, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Quiz score : \", this.state.scores));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/basil/farmsafety_app/src/components/quiz/quiz.js"],"names":["React","Component","QuestionBox","fire","Button","ButtonGroup","Toast","ProgressBar","Questions","Quizdata","Quiz","state","userAns","options","disabled","currentQuest","scores","loadQuiz","setState","questions","question","answer","pictures","picture","console","log","nextQuestion","e","alert","checkAns","pushtoDB","ref","database","newRef","push","set","Question","UserAnswer","componentDidMount","componentDidUpdate","prevProps","prevState","render","map","option","id","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport QuestionBox from \"./questionBox\";\nimport \"./quiz.css\";\n//import useState from \"react\";\nimport fire from \"../../config/fire\";\nimport { Button, ButtonGroup, Toast, ProgressBar } from \"react-bootstrap\";\n\nimport Questions, { Quizdata } from \"./questions\";\n//import { Label } from \"semantic-ui-react\";\nclass Quiz extends Component {\n  state = {\n    userAns: null,\n    options: [],\n    disabled: true,\n    currentQuest: 0,\n    scores: 0\n  };\n\n  loadQuiz = () => {\n    const { currentQuest } = this.state;\n    //  console.log(Quizdata[2].question);\n    this.setState(() => {\n      return {\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      };\n    });\n    console.log(this.state.answer);\n  };\n\n  nextQuestion = e => {\n    // e.preventDefault();\n    //  const { userAns, score } = this.state;\n    if (this.state.userAns === null) {\n      alert(\"choose an option\");\n      return;\n    }\n    this.setState({\n      currentQuest: this.state.currentQuest + 1\n    });\n    // console.log(this.state.currentQuest);\n  };\n\n  checkAns = userAns => {\n    const { answer, scores } = this.state;\n\n    this.setState({\n      userAns: answer,\n      disabled: false\n    });\n    console.log(userAns);\n    if (userAns === answer) {\n      console.log(\"correct\");\n      this.setState({\n        scores: scores + 1\n      });\n    } else {\n      console.log(\"Wrong\");\n      alert(\"Correct answer is \" + answer);\n    }\n\n    //console.log(scores);\n  };\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentQuest } = this.state;\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState({\n        disabled: true,\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      });\n      //console.log(this.state.questions);\n    }\n  }\n\n  pushtoDB = () => {\n    var ref = fire.database().ref(\"data\");\n    var newRef = ref.push();\n    newRef.set({\n      Question: this.state.questions, //Send data to DB to track for analysis\n      UserAnswer: this.state.userAns\n      // CorrectAnswer: this.state.answer\n    });\n\n    console.log(\"Sent to Database\");\n  };\n\n  render() {\n    const { userAns, options, currentQuest } = this.state;\n    return (\n      <div className=\"lol\">\n        <br></br>\n        <div>\n          <ProgressBar animated now={this.state.currentQuest * 10} />\n        </div>\n        {this.state.questions}\n        <br></br>\n\n        {options.map(option => (\n          <Button\n            key={option.id}\n            className={`ui floating message options\n            ${userAns === option ? \"selected\" : null}\n           `}\n            onClick={() => this.checkAns(option)}\n          >\n            {option}\n          </Button>\n        ))}\n\n        <br></br>\n        <Button onClick={() => this.checkAns()}>CHECK</Button>\n        <Button onClick={this.nextQuestion}>NEXT</Button>\n        <Button onClick={this.pushtoDB}>sent to DB</Button>\n        <br></br>\n\n        {currentQuest === Quizdata.length - 1 ? alert(\"Quiz FINISHED\") : null}\n        <span>Quiz score : {this.state.scores}</span>\n      </div>\n    );\n  }\n}\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}