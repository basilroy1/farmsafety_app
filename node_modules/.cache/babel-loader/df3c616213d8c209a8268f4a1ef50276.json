{"ast":null,"code":"var _jsxFileName = \"/home/basil/farmsafety_app/src/components/quiz/quiz.js\";\nimport React, { Component } from \"react\";\nimport QuestionBox from \"./questionBox\";\nimport \"./quiz.css\"; //import useState from \"react\";\n\nimport fire from \"../../config/fire\";\nimport { Button, ButtonGroup, Toast, ProgressBar } from \"react-bootstrap\";\nimport Questions, { Quizdata } from \"./questions\";\nimport { Label } from \"semantic-ui-react\";\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAns: this.state,\n      options: [],\n      disabled: true,\n      currentQuest: 0,\n      scores: 0\n    };\n\n    this.loadQuiz = () => {\n      const currentQuest = this.state.currentQuest; //  console.log(Quizdata[2].question);\n\n      this.setState(() => {\n        return {\n          questions: Quizdata[currentQuest].question,\n          options: Quizdata[currentQuest].options,\n          answer: Quizdata[currentQuest].answer,\n          pictures: Quizdata[currentQuest].picture\n        };\n      });\n      console.log(this.state.answer);\n    };\n\n    this.nextQuestion = e => {\n      // e.preventDefault();\n      const _this$state = this.state,\n            userAns = _this$state.userAns,\n            score = _this$state.score;\n      this.setState({\n        currentQuest: this.state.currentQuest + 1\n      }); // console.log(this.state.currentQuest);\n    };\n\n    this.checkAns = answer => {\n      const _this$state2 = this.state,\n            userAns = _this$state2.userAns,\n            scores = _this$state2.scores;\n      this.setState({\n        userAns: answer,\n        disabled: false\n      });\n\n      if (userAns === answer) {\n        console.log(\"correct\");\n        this.setState({\n          scores: scores + 1\n        });\n      } else {\n        console.log(\"Wrong\");\n      }\n\n      console.log(userAns); //console.log(scores);\n    };\n\n    this.pushtoDB = () => {\n      var ref = fire.database().ref(\"data\");\n      var newRef = ref.push();\n      newRef.set({\n        userAns: this.state.userAns,\n        questions: this.state.questions //Send data to DB to track for analysis\n\n      });\n      console.log(\"Sent to Database\");\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const currentQuest = this.state.currentQuest;\n\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState({\n        disabled: true,\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      }); //console.log(this.state.questions);\n    }\n  }\n\n  /*\n  ANSWER = option => {\n    const [answer, setAnswer] = useState(option);\n     {\n      answer.map((text, index) => (\n        <Button\n          key={index}\n          onClick={() => {\n            setAnswer([text]);\n          }}\n        >\n          {text}\n        </Button>\n      ));\n    }\n  };\n  */\n  render() {\n    const _this$state3 = this.state,\n          userAns = _this$state3.userAns,\n          options = _this$state3.options,\n          currentQuest = _this$state3.currentQuest;\n    return React.createElement(\"div\", {\n      className: \"lol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(ProgressBar, {\n      animated: true,\n      now: this.state.scores * 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), this.state.questions, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), options.map(option => React.createElement(Button, {\n      key: option.id,\n      className: \"ui floating message options\\n            \".concat(userAns === option ? \"selected\" : null, \"\\n           \"),\n      onClick: () => this.checkAns(option),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, option)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.pushtoDB,\n      onClick: () => this.checkAns(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"CHECK\"), React.createElement(Button, {\n      onClick: this.nextQuestion,\n      onClick: this.pushtoDB,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"NEXT\"), React.createElement(Button, {\n      onClick: this.pushtoDB,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"send to DB\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), currentQuest === Quizdata.length - 1 ? alert(\"Quiz FINISHED\") : null, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Quiz score : \", this.state.scores));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/basil/farmsafety_app/src/components/quiz/quiz.js"],"names":["React","Component","QuestionBox","fire","Button","ButtonGroup","Toast","ProgressBar","Questions","Quizdata","Label","Quiz","state","userAns","options","disabled","currentQuest","scores","loadQuiz","setState","questions","question","answer","pictures","picture","console","log","nextQuestion","e","score","checkAns","pushtoDB","ref","database","newRef","push","set","componentDidMount","componentDidUpdate","prevProps","prevState","render","map","option","id","length","alert"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport QuestionBox from \"./questionBox\";\nimport \"./quiz.css\";\n//import useState from \"react\";\nimport fire from \"../../config/fire\";\nimport { Button, ButtonGroup, Toast, ProgressBar } from \"react-bootstrap\";\n\nimport Questions, { Quizdata } from \"./questions\";\nimport { Label } from \"semantic-ui-react\";\nclass Quiz extends Component {\n  state = {\n    userAns: this.state,\n    options: [],\n    disabled: true,\n    currentQuest: 0,\n    scores: 0\n  };\n\n  loadQuiz = () => {\n    const { currentQuest } = this.state;\n    //  console.log(Quizdata[2].question);\n    this.setState(() => {\n      return {\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      };\n    });\n    console.log(this.state.answer);\n  };\n\n  nextQuestion = e => {\n    // e.preventDefault();\n    const { userAns, score } = this.state;\n\n    this.setState({\n      currentQuest: this.state.currentQuest + 1\n    });\n    // console.log(this.state.currentQuest);\n  };\n\n  checkAns = answer => {\n    const { userAns, scores } = this.state;\n\n    this.setState({\n      userAns: answer,\n      disabled: false\n    });\n    if (userAns === answer) {\n      console.log(\"correct\");\n      this.setState({\n        scores: scores + 1\n      });\n    } else {\n      console.log(\"Wrong\");\n    }\n    console.log(userAns);\n    //console.log(scores);\n  };\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentQuest } = this.state;\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState({\n        disabled: true,\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      });\n      //console.log(this.state.questions);\n    }\n  }\n\n  pushtoDB = () => {\n    var ref = fire.database().ref(\"data\");\n    var newRef = ref.push();\n    newRef.set({\n      userAns: this.state.userAns,\n      questions: this.state.questions //Send data to DB to track for analysis\n    });\n\n    console.log(\"Sent to Database\");\n  };\n\n  /*\n  ANSWER = option => {\n    const [answer, setAnswer] = useState(option);\n\n    {\n      answer.map((text, index) => (\n        <Button\n          key={index}\n          onClick={() => {\n            setAnswer([text]);\n          }}\n        >\n          {text}\n        </Button>\n      ));\n    }\n  };\n*/\n  render() {\n    const { userAns, options, currentQuest } = this.state;\n    return (\n      <div className=\"lol\">\n        <br></br>\n        <div>\n          <ProgressBar animated now={this.state.scores * 10} />\n        </div>\n        {this.state.questions}\n        <br></br>\n\n        {options.map(option => (\n          <Button\n            key={option.id}\n            className={`ui floating message options\n            ${userAns === option ? \"selected\" : null}\n           `}\n            onClick={() => this.checkAns(option)}\n          >\n            {option}\n          </Button>\n        ))}\n\n        <br></br>\n        <Button onClick={this.pushtoDB} onClick={() => this.checkAns()}>\n          CHECK\n        </Button>\n        <Button onClick={this.nextQuestion} onClick={this.pushtoDB}>\n          NEXT\n        </Button>\n        <Button onClick={this.pushtoDB}>send to DB</Button>\n        <br></br>\n\n        {currentQuest === Quizdata.length - 1 ? alert(\"Quiz FINISHED\") : null}\n        <span>Quiz score : {this.state.scores}</span>\n      </div>\n    );\n  }\n}\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}