{"ast":null,"code":"import _slicedToArray from \"/home/basil/farmsafety_app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/basil/farmsafety_app/src/components/quiz/quiz.js\";\nimport React, { Component } from \"react\";\nimport QuestionBox from \"./questionBox\";\nimport \"./quiz.css\";\nimport useState from \"react\";\nimport fire from \"../../config/fire\"; //import pictures from \"../pictures/health_hazard.jpg\";\n\nimport { Button, ButtonGroup, Toast } from \"react-bootstrap\";\nimport Questions, { Quizdata } from \"./questions\";\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadQuiz = () => {\n      const currentQuest = this.state.currentQuest;\n      this.setState(() => {\n        return {\n          questions: Quizdata[currentQuest].question,\n          options: Quizdata[currentQuest].option,\n          answers: Quizdata[currentQuest].answer,\n          pictures: Quizdata[currentQuest].picture\n        };\n      }); // console.log(this.state.options.option);\n    };\n\n    this.checkAns = (answer, options) => {\n      //  e.preventDefault();\n      this.setState({\n        userAns: answer\n      });\n    };\n\n    this.nextQuestion = e => {\n      //  e.preventDefault();\n      this.setState({\n        currentQuest: this.state.currentQuest + 1\n      }); //if (userAns == answer) {\n\n      this.setState({\n        scores: this.state.scores + 1\n      }); //}\n      //console.log(this.state.currentQuest);\n    };\n\n    this.ANSWER = ({\n      option\n    }) => {\n      const _useState = useState(option),\n            _useState2 = _slicedToArray(_useState, 2),\n            answer = _useState2[0],\n            setAnswer = _useState2[1];\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, option), answer.map((text, index) => React.createElement(Button, {\n        key: index,\n        onClick: () => {\n          setAnswer([text]);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, text)));\n    };\n\n    this.state = {\n      userAns: null,\n      options: [],\n      answers: \"\",\n      questions: \"\",\n      currentQuest: 0,\n      scores: 0\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const currentQuest = this.state.currentQuest;\n\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState({\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].option,\n        answers: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      }); //   console.log(this.state.options);\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          userAns = _this$state.userAns,\n          option = _this$state.option,\n          questions = _this$state.questions,\n          answers = _this$state.answers,\n          answer = _this$state.answer; ///const [setAnswer] = useState(option);\n\n    return React.createElement(\"div\", {\n      className: \"lol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), this.state.questions, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), this.state.options.map((lol, options, id, answer, text) => React.createElement(Button // key={id}\n    //  question={questions}\n    // option={options}\n    // answer={answers}\n    , {\n      selected: answer => this.checkAns(answer, option),\n      onClick: () => {\n        this.ANSWER;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, lol)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: () => this.checkAns(option),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"CHECK\"), React.createElement(Button, {\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"NEXT\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), this.state.currentQuest === Quizdata.length - 1 ? alert(\"Quiz FINISHED\") : null);\n  }\n\n}\n\nexport default Quiz;\n/*\nconst QuestionBox = ({ question, option }) => {\n  const [answer, setAnswer] = useState(option);\n  return (\n    <div>\n      <div>{question}</div>\n      {answer.map((text, index) => (\n        <Button\n          key={index}\n          onClick={() => {\n            setAnswer([text]);\n          }}\n        >\n          {text}\n        </Button>\n      ))}\n    </div>\n  );\n  */","map":{"version":3,"sources":["/home/basil/farmsafety_app/src/components/quiz/quiz.js"],"names":["React","Component","QuestionBox","useState","fire","Button","ButtonGroup","Toast","Questions","Quizdata","Quiz","constructor","props","loadQuiz","currentQuest","state","setState","questions","question","options","option","answers","answer","pictures","picture","checkAns","userAns","nextQuestion","e","scores","ANSWER","setAnswer","map","text","index","componentDidMount","componentDidUpdate","prevProps","prevState","render","lol","id","length","alert"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport QuestionBox from \"./questionBox\";\nimport \"./quiz.css\";\nimport useState from \"react\";\nimport fire from \"../../config/fire\";\n//import pictures from \"../pictures/health_hazard.jpg\";\nimport { Button, ButtonGroup, Toast } from \"react-bootstrap\";\n\nimport Questions, { Quizdata } from \"./questions\";\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAns: null,\n      options: [],\n      answers: \"\",\n      questions: \"\",\n      currentQuest: 0,\n      scores: 0\n    };\n  }\n  loadQuiz = () => {\n    const { currentQuest } = this.state;\n    this.setState(() => {\n      return {\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].option,\n        answers: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      };\n    });\n    // console.log(this.state.options.option);\n  };\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentQuest } = this.state;\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState({\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].option,\n        answers: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      });\n      //   console.log(this.state.options);\n    }\n  }\n\n  checkAns = (answer, options) => {\n    //  e.preventDefault();\n\n    this.setState({\n      userAns: answer\n    });\n  };\n\n  nextQuestion = e => {\n    //  e.preventDefault();\n    this.setState({\n      currentQuest: this.state.currentQuest + 1\n    });\n    //if (userAns == answer) {\n    this.setState({\n      scores: this.state.scores + 1\n    });\n    //}\n    //console.log(this.state.currentQuest);\n  };\n\n  ANSWER = ({ option }) => {\n    const [answer, setAnswer] = useState(option);\n    return (\n      <div>\n        <div>{option}</div>\n        {answer.map((text, index) => (\n          <Button\n            key={index}\n            onClick={() => {\n              setAnswer([text]);\n            }}\n          >\n            {text}\n          </Button>\n        ))}\n      </div>\n    );\n  };\n\n  render() {\n    const { userAns, option, questions, answers, answer } = this.state;\n    ///const [setAnswer] = useState(option);\n\n    return (\n      <div className=\"lol\">\n        <br></br>\n        {this.state.questions}\n        <br></br>\n        {/* {this.state.options.map(\n          item => (\n            <button\n              id=\"optionsData\"\n              className=\"ui floating message options\"\n              className={userAns === this.state.options ? \"selected\" : null}\n              onClick={() => this.checkAnswer(option)}\n            >\n              {item}\n            </button>\n          ) maps the options on the page\n        )}\n          */}\n\n        {this.state.options.map((lol, options, id, answer, text) => (\n          <Button\n            // key={id}\n            //  question={questions}\n            // option={options}\n            // answer={answers}\n            selected={answer => this.checkAns(answer, option)}\n            onClick={() => {\n              this.ANSWER;\n            }}\n          >\n            {lol}\n          </Button>\n        ))}\n\n        <br></br>\n        <Button onClick={() => this.checkAns(option)}>CHECK</Button>\n        <Button onClick={this.nextQuestion}>NEXT</Button>\n        <br></br>\n\n        {this.state.currentQuest === Quizdata.length - 1\n          ? alert(\"Quiz FINISHED\")\n          : null}\n      </div>\n    );\n  }\n}\nexport default Quiz;\n\n/*\nconst QuestionBox = ({ question, option }) => {\n  const [answer, setAnswer] = useState(option);\n  return (\n    <div>\n      <div>{question}</div>\n      {answer.map((text, index) => (\n        <Button\n          key={index}\n          onClick={() => {\n            setAnswer([text]);\n          }}\n        >\n          {text}\n        </Button>\n      ))}\n    </div>\n  );\n  */\n"]},"metadata":{},"sourceType":"module"}