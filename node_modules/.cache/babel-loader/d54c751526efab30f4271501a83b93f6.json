{"ast":null,"code":"var _jsxFileName = \"/home/basil/farmsafety_app/src/components/quiz/quiz.js\";\nimport React, { Component } from \"react\";\nimport \"./quiz.css\";\nimport useState from \"react\";\nimport fire from \"../../config/fire\"; //import pictures from \"../pictures/health_hazard.jpg\";\n\nimport { Button, ButtonGroup, Toast } from \"react-bootstrap\";\nimport Questions, { Quizdata } from \"./questions\";\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadQuiz = () => {\n      const currentQuest = this.state.currentQuest;\n      this.setState(() => {\n        return {\n          questions: Quizdata[currentQuest].question,\n          options: Quizdata[currentQuest].option,\n          answers: Quizdata[currentQuest].answer,\n          pictures: Quizdata[currentQuest].picture\n        };\n      }); // console.log(this.state.options.option);\n    };\n\n    this.checkAnswer = (answer, options) => {\n      //  e.preventDefault();\n      this.setState({\n        userAns: answer\n      });\n    };\n\n    this.nextQuestion = e => {\n      //  e.preventDefault();\n      this.setState({\n        currentQuest: this.state.currentQuest + 1\n      }); //if (userAns == answer) {\n\n      this.setState({\n        scores: this.state.scores + 1\n      }); //}\n      //console.log(this.state.currentQuest);\n    };\n\n    this.state = {\n      userAns: null,\n      options: [],\n      answers: \"\",\n      questions: \"\",\n      currentQuest: 0,\n      scores: 0\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const currentQuest = this.state.currentQuest;\n\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState(() => {\n        return {\n          questions: Quizdata[currentQuest].question,\n          options: Quizdata[currentQuest].option,\n          answers: Quizdata[currentQuest].answer,\n          pictures: Quizdata[currentQuest].picture\n        };\n      }); //   console.log(this.state.options);\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          userAns = _this$state.userAns,\n          option = _this$state.option,\n          questions = _this$state.questions,\n          answers = _this$state.answers; //const [setAnswer] = useState(option);\n\n    return React.createElement(\"div\", {\n      className: \"lol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), this.state.questions, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), this.state.questions.map((questions, id, answers, options) => React.createElement(Button, {\n      key: id,\n      question: questions,\n      option: options,\n      answer: answers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, questions)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: () => this.checkAnswer(option),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"CHECK\"), React.createElement(Button, {\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"NEXT\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), this.state.currentQuest === Quizdata.length - 1 ? alert(\"Quiz FINISHED\") : null);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/basil/farmsafety_app/src/components/quiz/quiz.js"],"names":["React","Component","useState","fire","Button","ButtonGroup","Toast","Questions","Quizdata","Quiz","constructor","props","loadQuiz","currentQuest","state","setState","questions","question","options","option","answers","answer","pictures","picture","checkAnswer","userAns","nextQuestion","e","scores","componentDidMount","componentDidUpdate","prevProps","prevState","render","map","id","length","alert"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,YAAP;AACA,OAAOC,QAAP,MAAqB,OAArB;AACA,OAAOC,IAAP,MAAiB,mBAAjB,C,CACA;;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,KAA9B,QAA2C,iBAA3C;AAEA,OAAOC,SAAP,IAAoBC,QAApB,QAAoC,aAApC;;AACA,MAAMC,IAAN,SAAmBR,SAAnB,CAA6B;AAC3BS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAWnBC,QAXmB,GAWR,MAAM;AAAA,YACPC,YADO,GACU,KAAKC,KADf,CACPD,YADO;AAEf,WAAKE,QAAL,CAAc,MAAM;AAClB,eAAO;AACLC,UAAAA,SAAS,EAAER,QAAQ,CAACK,YAAD,CAAR,CAAuBI,QAD7B;AAELC,UAAAA,OAAO,EAAEV,QAAQ,CAACK,YAAD,CAAR,CAAuBM,MAF3B;AAGLC,UAAAA,OAAO,EAAEZ,QAAQ,CAACK,YAAD,CAAR,CAAuBQ,MAH3B;AAILC,UAAAA,QAAQ,EAAEd,QAAQ,CAACK,YAAD,CAAR,CAAuBU;AAJ5B,SAAP;AAMD,OAPD,EAFe,CAUf;AACD,KAtBkB;;AAAA,SAuBnBC,WAvBmB,GAuBL,CAACH,MAAD,EAASH,OAAT,KAAqB;AACjC;AAEA,WAAKH,QAAL,CAAc;AACZU,QAAAA,OAAO,EAAEJ;AADG,OAAd;AAGD,KA7BkB;;AAAA,SA+BnBK,YA/BmB,GA+BJC,CAAC,IAAI;AAClB;AACA,WAAKZ,QAAL,CAAc;AACZF,QAAAA,YAAY,EAAE,KAAKC,KAAL,CAAWD,YAAX,GAA0B;AAD5B,OAAd,EAFkB,CAKlB;;AACA,WAAKE,QAAL,CAAc;AACZa,QAAAA,MAAM,EAAE,KAAKd,KAAL,CAAWc,MAAX,GAAoB;AADhB,OAAd,EANkB,CASlB;AACA;AACD,KA1CkB;;AAEjB,SAAKd,KAAL,GAAa;AACXW,MAAAA,OAAO,EAAE,IADE;AAEXP,MAAAA,OAAO,EAAE,EAFE;AAGXE,MAAAA,OAAO,EAAE,EAHE;AAIXJ,MAAAA,SAAS,EAAE,EAJA;AAKXH,MAAAA,YAAY,EAAE,CALH;AAMXe,MAAAA,MAAM,EAAE;AANG,KAAb;AAQD;;AAkCDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKjB,QAAL,GADkB,CACD;AAClB;;AAEDkB,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAAA,UAC/BnB,YAD+B,GACd,KAAKC,KADS,CAC/BD,YAD+B;;AAEvC,QAAI,KAAKC,KAAL,CAAWD,YAAX,KAA4BmB,SAAS,CAACnB,YAA1C,EAAwD;AACtD,WAAKE,QAAL,CAAc,MAAM;AAClB,eAAO;AACLC,UAAAA,SAAS,EAAER,QAAQ,CAACK,YAAD,CAAR,CAAuBI,QAD7B;AAELC,UAAAA,OAAO,EAAEV,QAAQ,CAACK,YAAD,CAAR,CAAuBM,MAF3B;AAGLC,UAAAA,OAAO,EAAEZ,QAAQ,CAACK,YAAD,CAAR,CAAuBQ,MAH3B;AAILC,UAAAA,QAAQ,EAAEd,QAAQ,CAACK,YAAD,CAAR,CAAuBU;AAJ5B,SAAP;AAMD,OAPD,EADsD,CAStD;AACD;AACF;;AAEDU,EAAAA,MAAM,GAAG;AAAA,wBACyC,KAAKnB,KAD9C;AAAA,UACCW,OADD,eACCA,OADD;AAAA,UACUN,MADV,eACUA,MADV;AAAA,UACkBH,SADlB,eACkBA,SADlB;AAAA,UAC6BI,OAD7B,eAC6BA,OAD7B,EAEP;;AACA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKN,KAAL,CAAWE,SAFd,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAkBG,KAAKF,KAAL,CAAWE,SAAX,CAAqBkB,GAArB,CAAyB,CAAClB,SAAD,EAAYmB,EAAZ,EAAgBf,OAAhB,EAAyBF,OAAzB,KACxB,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEiB,EADP;AAEE,MAAA,QAAQ,EAAEnB,SAFZ;AAGE,MAAA,MAAM,EAAEE,OAHV;AAIE,MAAA,MAAM,EAAEE,OAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGJ,SANH,CADD,CAlBH,EA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BF,EA8BE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKQ,WAAL,CAAiBL,MAAjB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA9BF,EA+BE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKO,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BF,EAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhCF,EAkCG,KAAKZ,KAAL,CAAWD,YAAX,KAA4BL,QAAQ,CAAC4B,MAAT,GAAkB,CAA9C,GACGC,KAAK,CAAC,eAAD,CADR,GAEG,IApCN,CADF;AAwCD;;AA3G0B;;AA6G7B,eAAe5B,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./quiz.css\";\nimport useState from \"react\";\nimport fire from \"../../config/fire\";\n//import pictures from \"../pictures/health_hazard.jpg\";\nimport { Button, ButtonGroup, Toast } from \"react-bootstrap\";\n\nimport Questions, { Quizdata } from \"./questions\";\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAns: null,\n      options: [],\n      answers: \"\",\n      questions: \"\",\n      currentQuest: 0,\n      scores: 0\n    };\n  }\n  loadQuiz = () => {\n    const { currentQuest } = this.state;\n    this.setState(() => {\n      return {\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].option,\n        answers: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      };\n    });\n    // console.log(this.state.options.option);\n  };\n  checkAnswer = (answer, options) => {\n    //  e.preventDefault();\n\n    this.setState({\n      userAns: answer\n    });\n  };\n\n  nextQuestion = e => {\n    //  e.preventDefault();\n    this.setState({\n      currentQuest: this.state.currentQuest + 1\n    });\n    //if (userAns == answer) {\n    this.setState({\n      scores: this.state.scores + 1\n    });\n    //}\n    //console.log(this.state.currentQuest);\n  };\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentQuest } = this.state;\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState(() => {\n        return {\n          questions: Quizdata[currentQuest].question,\n          options: Quizdata[currentQuest].option,\n          answers: Quizdata[currentQuest].answer,\n          pictures: Quizdata[currentQuest].picture\n        };\n      });\n      //   console.log(this.state.options);\n    }\n  }\n\n  render() {\n    const { userAns, option, questions, answers } = this.state;\n    //const [setAnswer] = useState(option);\n    return (\n      <div className=\"lol\">\n        <br></br>\n        {this.state.questions}\n        <br></br>\n        {/* {this.state.options.map(\n          item => (\n            <button\n              id=\"optionsData\"\n              className=\"ui floating message options\"\n              className={userAns === this.state.options ? \"selected\" : null}\n              onClick={() => this.checkAnswer(option)}\n            >\n              {item}\n            </button>\n          ) maps the options on the page\n        )}\n          */}\n\n        {this.state.questions.map((questions, id, answers, options) => (\n          <Button\n            key={id}\n            question={questions}\n            option={options}\n            answer={answers}\n          >\n            {questions}\n          </Button>\n        ))}\n\n        <br></br>\n        <Button onClick={() => this.checkAnswer(option)}>CHECK</Button>\n        <Button onClick={this.nextQuestion}>NEXT</Button>\n        <br></br>\n\n        {this.state.currentQuest === Quizdata.length - 1\n          ? alert(\"Quiz FINISHED\")\n          : null}\n      </div>\n    );\n  }\n}\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}