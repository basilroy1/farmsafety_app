{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.easing = {\n  // No easing, no acceleration\n  linear: function (t) {\n    return t;\n  },\n  // Accelerates fast, then slows quickly towards end.\n  quadratic: function (t) {\n    return t * (-(t * t) * t + 4 * t * t - 6 * t + 4);\n  },\n  // Overshoots over 1 and then returns to 1 towards end.\n  cubic: function (t) {\n    return t * (4 * t * t - 9 * t + 6);\n  },\n  // Overshoots over 1 multiple times - wiggles around 1.\n  elastic: function (t) {\n    return t * (33 * t * t * t * t - 106 * t * t * t + 126 * t * t - 67 * t + 15);\n  },\n  // Accelerating from zero velocity\n  inQuad: function (t) {\n    return t * t;\n  },\n  // Decelerating to zero velocity\n  outQuad: function (t) {\n    return t * (2 - t);\n  },\n  // Acceleration until halfway, then deceleration\n  inOutQuad: function (t) {\n    return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n  },\n  // Accelerating from zero velocity\n  inCubic: function (t) {\n    return t * t * t;\n  },\n  // Decelerating to zero velocity\n  outCubic: function (t) {\n    return --t * t * t + 1;\n  },\n  // Acceleration until halfway, then deceleration\n  inOutCubic: function (t) {\n    return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n  },\n  // Accelerating from zero velocity\n  inQuart: function (t) {\n    return t * t * t * t;\n  },\n  // Decelerating to zero velocity\n  outQuart: function (t) {\n    return 1 - --t * t * t * t;\n  },\n  // Acceleration until halfway, then deceleration\n  inOutQuart: function (t) {\n    return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n  },\n  // Accelerating from zero velocity\n  inQuint: function (t) {\n    return t * t * t * t * t;\n  },\n  // Decelerating to zero velocity\n  outQuint: function (t) {\n    return 1 + --t * t * t * t * t;\n  },\n  // Acceleration until halfway, then deceleration\n  inOutQuint: function (t) {\n    return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n  },\n  // Accelerating from zero velocity\n  inSine: function (t) {\n    return -Math.cos(t * (Math.PI / 2)) + 1;\n  },\n  // Decelerating to zero velocity\n  outSine: function (t) {\n    return Math.sin(t * (Math.PI / 2));\n  },\n  // Accelerating until halfway, then decelerating\n  inOutSine: function (t) {\n    return -(Math.cos(Math.PI * t) - 1) / 2;\n  },\n  // Exponential accelerating from zero velocity\n  inExpo: function (t) {\n    return Math.pow(2, 10 * (t - 1));\n  },\n  // Exponential decelerating to zero velocity\n  outExpo: function (t) {\n    return -Math.pow(2, -10 * t) + 1;\n  },\n  // Exponential accelerating until halfway, then decelerating\n  inOutExpo: function (t) {\n    t /= .5;\n    if (t < 1) return Math.pow(2, 10 * (t - 1)) / 2;\n    t--;\n    return (-Math.pow(2, -10 * t) + 2) / 2;\n  },\n  // Circular accelerating from zero velocity\n  inCirc: function (t) {\n    return -Math.sqrt(1 - t * t) + 1;\n  },\n  // Circular decelerating to zero velocity Moves VERY fast at the beginning and\n  // then quickly slows down in the middle. This tween can actually be used\n  // in continuous transitions where target value changes all the time,\n  // because of the very quick start, it hides the jitter between target value changes.\n  outCirc: function (t) {\n    return Math.sqrt(1 - (t = t - 1) * t);\n  },\n  // Circular acceleration until halfway, then deceleration\n  inOutCirc: function (t) {\n    t /= .5;\n    if (t < 1) return -(Math.sqrt(1 - t * t) - 1) / 2;\n    t -= 2;\n    return (Math.sqrt(1 - t * t) + 1) / 2;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}