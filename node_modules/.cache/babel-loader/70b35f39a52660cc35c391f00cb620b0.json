{"ast":null,"code":"var _jsxFileName = \"/home/basil/farmsafety_app/src/components/quiz/quiz.js\";\nimport React, { Component } from \"react\";\nimport QuestionBox from \"./questionBox\";\nimport \"./quiz.css\";\nimport useState from \"react\";\nimport fire from \"../../config/fire\";\nimport { Button, ButtonGroup, Toast, ProgressBar } from \"react-bootstrap\";\nimport Questions, { Quizdata } from \"./questions\";\nimport { Label } from \"semantic-ui-react\";\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadQuiz = () => {\n      const currentQuest = this.state.currentQuest; //  console.log(Quizdata[2].question);\n\n      this.setState(() => {\n        return {\n          questions: Quizdata[currentQuest].question,\n          options: Quizdata[currentQuest].options,\n          answer: Quizdata[currentQuest].answer,\n          pictures: Quizdata[currentQuest].picture\n        };\n      });\n      console.log(this.state.answer);\n    };\n\n    this.nextQuestion = e => {\n      // e.preventDefault();\n      const _this$state = this.state,\n            userAns = _this$state.userAns,\n            score = _this$state.score;\n      this.setState({\n        currentQuest: this.state.currentQuest + 1\n      }); // console.log(this.state.currentQuest);\n    };\n\n    this.checkAns = answer => {\n      const _this$state2 = this.state,\n            userAns = _this$state2.userAns,\n            scores = _this$state2.scores;\n      this.setState({\n        userAns: answer,\n        disabled: false\n      });\n\n      if (userAns === answer) {\n        console.log(\"correct\");\n        this.setState({\n          scores: scores + 1\n        });\n      } else {\n        console.log(\"Wrong\");\n      }\n\n      console.log(userAns); //console.log(scores);\n    };\n\n    this.state = {\n      userAns: null,\n      options: [],\n      disabled: true,\n      currentQuest: 0,\n      scores: 0\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const currentQuest = this.state.currentQuest;\n\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState({\n        disabled: true,\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      }); //console.log(this.state.questions);\n    }\n  }\n  /*\n  ANSWER = option => {\n    const [answer, setAnswer] = useState(option);\n     {\n      answer.map((text, index) => (\n        <Button\n          key={index}\n          onClick={() => {\n            setAnswer([text]);\n          }}\n        >\n          {text}\n        </Button>\n      ));\n    }\n  };\n  */\n\n\n  render() {\n    const _this$state3 = this.state,\n          userAns = _this$state3.userAns,\n          options = _this$state3.options,\n          currentQuest = _this$state3.currentQuest;\n    return React.createElement(\"div\", {\n      className: \"lol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(ProgressBar, {\n      animated: true,\n      now: this.state.scores * 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), this.state.questions, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), options.map(option => React.createElement(Button, {\n      key: option.id,\n      className: \"ui floating message options\\n            \".concat(userAns === option ? \"selected\" : null, \"\\n           \"),\n      onClick: () => this.checkAns(option),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, option)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: () => this.checkAns(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"CHECK\"), React.createElement(Button, {\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"NEXT\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), currentQuest === Quizdata.length - 1 ? alert(\"Quiz FINISHED\") : null, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Quiz score : \", this.state.scores));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/basil/farmsafety_app/src/components/quiz/quiz.js"],"names":["React","Component","QuestionBox","useState","fire","Button","ButtonGroup","Toast","ProgressBar","Questions","Quizdata","Label","Quiz","constructor","props","loadQuiz","currentQuest","state","setState","questions","question","options","answer","pictures","picture","console","log","nextQuestion","e","userAns","score","checkAns","scores","disabled","componentDidMount","componentDidUpdate","prevProps","prevState","render","map","option","id","length","alert"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport QuestionBox from \"./questionBox\";\nimport \"./quiz.css\";\nimport useState from \"react\";\nimport fire from \"../../config/fire\";\nimport { Button, ButtonGroup, Toast, ProgressBar } from \"react-bootstrap\";\n\nimport Questions, { Quizdata } from \"./questions\";\nimport { Label } from \"semantic-ui-react\";\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAns: null,\n      options: [],\n      disabled: true,\n      currentQuest: 0,\n      scores: 0\n    };\n  }\n  loadQuiz = () => {\n    const { currentQuest } = this.state;\n    //  console.log(Quizdata[2].question);\n    this.setState(() => {\n      return {\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      };\n    });\n    console.log(this.state.answer);\n  };\n\n  nextQuestion = e => {\n    // e.preventDefault();\n    const { userAns, score } = this.state;\n\n    this.setState({\n      currentQuest: this.state.currentQuest + 1\n    });\n    // console.log(this.state.currentQuest);\n  };\n\n  checkAns = answer => {\n    const { userAns, scores } = this.state;\n\n    this.setState({\n      userAns: answer,\n      disabled: false\n    });\n    if (userAns === answer) {\n      console.log(\"correct\");\n      this.setState({\n        scores: scores + 1\n      });\n    } else {\n      console.log(\"Wrong\");\n    }\n    console.log(userAns);\n    //console.log(scores);\n  };\n\n  componentDidMount() {\n    this.loadQuiz(); //loads quiz quiz data in\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentQuest } = this.state;\n    if (this.state.currentQuest !== prevState.currentQuest) {\n      this.setState({\n        disabled: true,\n        questions: Quizdata[currentQuest].question,\n        options: Quizdata[currentQuest].options,\n        answer: Quizdata[currentQuest].answer,\n        pictures: Quizdata[currentQuest].picture\n      });\n      //console.log(this.state.questions);\n    }\n  }\n\n  /*\n  ANSWER = option => {\n    const [answer, setAnswer] = useState(option);\n\n    {\n      answer.map((text, index) => (\n        <Button\n          key={index}\n          onClick={() => {\n            setAnswer([text]);\n          }}\n        >\n          {text}\n        </Button>\n      ));\n    }\n  };\n*/\n  render() {\n    const { userAns, options, currentQuest } = this.state;\n    return (\n      <div className=\"lol\">\n        <br></br>\n        <div>\n          <ProgressBar animated now={this.state.scores * 10} />\n        </div>\n        {this.state.questions}\n        <br></br>\n\n        {options.map(option => (\n          <Button\n            key={option.id}\n            className={`ui floating message options\n            ${userAns === option ? \"selected\" : null}\n           `}\n            onClick={() => this.checkAns(option)}\n          >\n            {option}\n          </Button>\n        ))}\n\n        <br></br>\n        <Button onClick={() => this.checkAns()}>CHECK</Button>\n        <Button onClick={this.nextQuestion}>NEXT</Button>\n        <br></br>\n\n        {currentQuest === Quizdata.length - 1 ? alert(\"Quiz FINISHED\") : null}\n        <span>Quiz score : {this.state.scores}</span>\n      </div>\n    );\n  }\n}\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}